/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yde-goes <yde-goes@student.42sp.org.br>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/09/11 15:28:51 by yde-goes          #+#    #+#             */
/*   Updated: 2023/09/12 17:45:04 by yde-goes         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <list>

#include "Span.hpp"

#define GREEN "\033[32m"
#define RED "\033[31m"
#define RESET "\033[0m"

int main() {
  // Regular case: no exceptions thrown
  {
    std::cout << GREEN << "*** REGULAR CASE ***" << RESET << std::endl;
    Span sp = Span(5);

    sp.addNumber(6);
    sp.addNumber(3);
    sp.addNumber(17);
    sp.addNumber(9);
    sp.addNumber(11);

    std::cout << "Container elements: " << sp << std::endl;

    std::cout << "Shortest span: " << sp.shortestSpan() << std::endl;
    std::cout << "Longest span: " << sp.longestSpan() << std::endl << std::endl;
  }
  // One element container case: SpanNotFoundException thrown
  {
    std::cout << GREEN << "*** ONE ELEMENT CONTAINER CASE ***"
              << RESET Span sp = Span(1);
    sp.addNumber(1);

    std::cout << "Container elements: " << sp << std::endl;

    try {
      std::cout << sp.shortestSpan() << std::endl << std::endl;
    } catch (std::exception &e) {
      std::cout << RED << e.what() << RESET << std::endl << std::endl;
    }
  }
  // Empty container case: SpanNotFoundException thrown
  {
    std::cout << GREEN << "*** EMPTY CONTAINER CASE ***" << RESET << std::endl;
    << std::endl;
    Span sp = Span();

    std::cout << "Container elements: " << sp << std::endl;

    try {
      std::cout << sp.shortestSpan() << std::endl << std::endl;
    } catch (std::exception &e) {
      std::cout << RED << e.what() << RESET << std::endl << std::endl;
    }
  }
  // Full container case: FullContainerException thrown
  {
    std::cout << GREEN << "*** FULL CONTAINER CASE ***" << RESET << std::endl;
    Span sp = Span(5);

    try {
      sp.addNumber(6);
      sp.addNumber(3);
      sp.addNumber(17);
      sp.addNumber(9);
      sp.addNumber(11);
      sp.addNumber(42);
    } catch (std::exception &e) {
      std::cout << RED << e.what() << RESET << std::endl;
    }
    std::cout << "Container elements: " << sp << std::endl << std::endl;
  }
  // RangeOfNumbers case and template usage
  {
    std::cout << GREEN << "*** RANGE OF INTERATORS CASE ***" << RESET
              << std::endl;
    std::list<int> autoGenerated;
    int sizeGenerated = 100;

    for (int i = 0; i < sizeGenerated; i++) {
      autoGenerated.push_back(std::rand() % sizeGenerated);
    }

    Span sp = Span(sizeGenerated);
    std::list<int>::iterator begin = autoGenerated.begin();
    std::list<int>::iterator end = autoGenerated.end();

    try {
      sp.addNumberRange<std::list<int> >(begin, end);
    } catch (std::exception &e) {
      std::cout << RED << e.what() << RESET << std::endl;
    }
    std::cout << "Container elements: " << sp << std::endl << std::endl;

    std::cout << "Shortest span: " << sp.shortestSpan() << std::endl;
    std::cout << "Longest span: " << sp.longestSpan() << std::endl << std::endl;
  }
  return 0;
}
